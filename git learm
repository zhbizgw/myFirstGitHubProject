git config --global user.name "zhbizgw" //设置用户名
git config --global user.email zhbizgw_01@163.com //设置邮箱

git config --global alias.st status //设置别名
git config --global alias.ci "commit -s"
git config --global alias.co checkout
git config --global alias.br branch

git init //创建工作区及版本库
git add //提交及修改文件到暂存区
git commit //暂存区提交到HEAD

git diff //工作区与暂存区比较
git diff --cached //暂存区与HEAD比较
git diff --HEAD //工作区与HEAD比较

git branch //显示当前工作分支

git reset --hard HEAD^ //这条命令就相当于将master重置到上一个老的提交上（注意这条命令中使用 --hard参数，会破坏工作区未提交的改动，慎用。）
git log --graph --oneline //查看提交历史ID
git reset --hard 9e8a761 //重置到最早的一次提交 （注意重置命令很危险，会彻底地丢失历史，如果没有记下重置前的master分支指向的提交ID，想要重置回原来的提交似乎是一件麻烦的事情）
git config core.logallrefupdates //查看工作区版本库是否提供分支日志功能
tail -5 .git/logs/refs/heads/master //查看这个文件记录master分支指向的变迁
git reflog show master | head -5 //显示此文件的内容
git reset --hard master@{2} //重置master为两次改变之前的值
git reset HEAD <paths> //相当于取消之前执行的git add <paths>命令时改变的暂存区


1. 替换引用的指向。引用指向新的提交ID
2. 替换暂存区。替换后，暂存区的内容和引用指向的目录树一致。
3. 替换工作区。替换后，工作区的内容变的和暂存区一致，也和HEAD所指向的目录树内容一致
git reset --hard <commit> //执行1,2,3
git reset --soft <commit> //执行1	
git reset <commit> 或 git reset --mixed <commit> //执行1,2

git reset //仅用HEAD指向的目录树重置暂存区，工作区不会受到影响，相当于将之前用git add命令更新到暂存区的内容撤出暂存区。引用也未改变，因为应用重置了暂存区到HEAD相当于没重置。
git reset HEAD //同上
git reset --filename //仅将文件filename的改动撤出暂存区，暂存区中其他文件不变。相当于对命令git add filename的反向操作。
git reset HEAD filename //同上
git reset --soft HEAD^ //工作区和暂存区不改变，但是引用向前回退一次。当对最新提交的提交说明或提交更改不满意时，撤销最新的提交以便重新提交。
git reset HEAD^ //工作区不改变，但是暂存区会回退到上一次提交之前，引用也会回退一次。
git reset --mixed HEAD^ //同上
git reset --hard HEAD^ //彻底撤销最近的提交，引用回退到上一次，而且工作区和缓存区都会回退到上一次提交的状态，自上一次提交以来的全部丢失。


git checkout branch //检出branch分支，更新HEAD以指向branch分支，以及用branch指向的树更新暂存区和工作区。
git checkout //汇总显示工作区，暂存区与HEAD的差异。
git checkout HEAD //同上
git checkout --filename //用暂存区的filename文件来覆盖工作区的filename文件，相当于取消自上次执行git add filename以来（如果执行过）的本地修改。（这个命令很危险，因为对于本地的修改会无声无息的覆盖，毫不留情）
git checkout branch --filename //维持HEAD的指向不变，用branch所指向的提交中的filename替换暂存区和工作区中的相应文件。注意会将暂存区和工作区中的filename文件直接覆盖。

git checkout -- .或者写作git checkout . //注意git checkout 命令后的参数为一个点（"."）。这条命令最危险！会取消所有本地的修改（相对于暂存区）。相当于用暂存区的所有文件直接覆盖本地文件，不给用户任何确认的机会！

git stash //保存当前的工作进度。会分别对暂存区和工作区的状态进行保存。
git stash list //显示进度列表，此命令显然暗示了git stash可以多次保存工作进度，并且在恢复的时候进行选择。
git stash pop //从最近保存的进度进行回复（完整命令git stash pop [--index] [<stash>], 如果不使用任何参数，会恢复最新保存的工作进度，并将恢复的工作进度从存储的工作进度列表中删除）
git stash apply //除了不删除恢复的进度之外，其余和git stash pop命令一样。
git stash drop //删除一个存储的进度。默认删除最新的进度。
git stash clear //删除所有存储的进度
git stash branch //基于进度创建分支。
git clean -nd //查看那些文件和目录会被删除（在删除本地多余的文件和目录时可以先查看看）
git clean -fd //真正开始强制删除多余的文件和目录。


